var urlParams = {
  url: new URL(window.location.href),
  get: function (name) {
    return this.url.searchParams.get(name);
  },
  set: function (name, value) {
    this.url.searchParams.set(name, value);
    window.history.replaceState(null, null, this.url); // or pushState
  },
  delete: function (name) {
    this.url.searchParams.delete(name);
    window.history.replaceState(null, null, this.url); // or pushState
  },
  getArray: function () {
    var obj = {};
    this.url.searchParams.forEach(function (value, name) {
      obj[name] = value;
    });
    return obj;
  },
};

function dateToYMD(date) {
  var d = date.getDate();
  var m = date.getMonth() + 1; //Month from 0 to 11
  var y = date.getFullYear();
  return "" + y + "-" + (m <= 9 ? "0" + m : m) + "-" + (d <= 9 ? "0" + d : d);
}

function dateToDMY(date) {
  var d = date.getDate();
  var m = date.getMonth() + 1; //Month from 0 to 11
  var y = date.getFullYear();
  return "" + (d <= 9 ? "0" + d : d) + "/" + (m <= 9 ? "0" + m : m) + "/" + y;
}

function formatRupiah(angka, prefix = "Rp. ") {
  var number_string = angka.replace(/[^,\d]/g, "").toString(),
    split = number_string.split(","),
    sisa = split[0].length % 3,
    rupiah = split[0].substr(0, sisa),
    ribuan = split[0].substr(sisa).match(/\d{3}/gi);

  if (ribuan) {
    separator = sisa ? "." : "";
    rupiah += separator + ribuan.join(".");
  }

  rupiah = split[1] != undefined ? rupiah + "," + split[1] : rupiah;
  return prefix == undefined ? rupiah : rupiah ? "Rp. " + rupiah : "";
}

$(document).ready(function () {
  $('input[alpha-numeric-only="true"]').on(
    "keyup keydown change",
    function (event) {
      this.value = this.value.replace(/[^a-zA-Z0-9]+/i, "");
    }
  );
});

$.fn.readmore = function (len = 125) {
  string = this.text();
  if (string) {
    if (string.length > len) {
      var text_view = `<span>${string.substring(
        0,
        len
      )}<a read="more" href="#" type="button">.. (Selengkapnya)</a></span>`;
      var text_more = `<span class="more">${string.substring(
        len,
        string.length
      )} <a read="less" href="#" type="button">(Lebih Sedikit)</a></span>`;
      var p = '<p read="less">' + text_view + text_more + "<p>";
      this.html(p);
    } else {
      return string;
    }
  }

  $('a[read="more"]', this).click(function (e) {
    e.preventDefault();
    this.closest("p[read]").setAttribute("read", "more");
  });

  $('a[read="less"]', this).click(function (e) {
    e.preventDefault();
    this.closest("p[read]").setAttribute("read", "less");
  });

  return this;
};

$.fn.counter = function (config) {
  this.each(function (a, b) {
    var count = parseInt(b.getAttribute(config.attribute));
    var interval = setInterval(function () {
      if (parseInt(b.innerText) < count) {
        b.innerText = (parseInt(b.innerText) + 1).toString();
      } else {
        clearInterval(interval);
      }
    }, 25);
  });
};

$.fn.formReset = function () {
  this.each(function (index, el) {
    el.reset();
  });
  this.find('input[type="hidden"]').val("");
};

$.fn.select2Ajax = function ({ url = "", method = "GET", data = null }) {
  let context = this;
  $.httpRequest({
    url,
    method,
    data,
    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
    processData: true,
    response: (res) => {
      if (res.statusCode == 200) {
        context.empty().select2({
          data: res.data,
          escapeMarkup: function (markup) {
            return markup;
          },
        });
      }
    },
  });
};

$.fn.formValue = function () {
  let data = new Object();
  $(this).each(function (index, el) {
    let name = el.name;
    let value = el.value;
    data[name] = value;
  });
  return data;
};

$.httpRequest = function ({
  url,
  method,
  data = null,
  contentType = false,
  processData = false,
  response: cb,
}) {
  $.ajax({
    url: url,
    type: method,
    data: data,
    dataType: "json",
    processData: processData,
    contentType: contentType,
    async: true,
  }).always((res) => {
    typeof res["responseJSON"] === "undefined" ? cb(res) : cb(res.responseJSON);
  });
};

$.fetchData = function ({
  url = "",
  method = "GET",
  data = null,
  response: cb,
}) {
  $.httpRequest({
    url,
    method,
    data,
    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
    processData: true,
    response: (res) => {
      let dataFetch;
      if (res.statusCode == 200) {
        dataFetch = res.data;
      } else {
        alert("An Error Occurred While Retrieving Data..");
      }

      cb(dataFetch);
    },
  });
};

$.fn.formSubmit = function (callback) {
  this.submit(function (e) {
    e.preventDefault();

    let data = new FormData(this);
    let id = data.get("id") ? data.get("id") : "";

    // Unset key id
    data.delete("id");

    $("body").LoadingOverlay("show");
    $.httpRequest({
      url: id != "" ? `${this.action}/${id}` : this.action,
      method: this.method,
      data: data,
      response: (res) => {
        $("body").LoadingOverlay("hide");
        $(".message-error").empty();

        switch (res.statusCode) {
          case 400:
            let error = res.data.error;
            let index = Object.keys(error);
            index.forEach((val) => {
              $(`small[data-target="${val}_error"]`).text(error[val]);
            });
            break;
          case 403:
            swal("Maaf !", res.message, "error");
            break;
          case 404:
            swal("Maaf !", res.message, "error");
            break;
          case 500:
            swal("Maaf !", res.message, "error");
            break;
          default:
            // code
            break;
        }

        // ==> Callback
        callback(res);
      },
    });
  });
};
